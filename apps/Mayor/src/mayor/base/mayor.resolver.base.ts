/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Mayor } from "./Mayor";
import { MayorCountArgs } from "./MayorCountArgs";
import { MayorFindManyArgs } from "./MayorFindManyArgs";
import { MayorFindUniqueArgs } from "./MayorFindUniqueArgs";
import { CreateMayorArgs } from "./CreateMayorArgs";
import { UpdateMayorArgs } from "./UpdateMayorArgs";
import { DeleteMayorArgs } from "./DeleteMayorArgs";
import { AdminFindManyArgs } from "../../admin/base/AdminFindManyArgs";
import { Admin } from "../../admin/base/Admin";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { MayorService } from "../mayor.service";
@graphql.Resolver(() => Mayor)
export class MayorResolverBase {
  constructor(protected readonly service: MayorService) {}

  async _mayorsMeta(
    @graphql.Args() args: MayorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Mayor])
  async mayors(@graphql.Args() args: MayorFindManyArgs): Promise<Mayor[]> {
    return this.service.mayors(args);
  }

  @graphql.Query(() => Mayor, { nullable: true })
  async mayor(
    @graphql.Args() args: MayorFindUniqueArgs
  ): Promise<Mayor | null> {
    const result = await this.service.mayor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Mayor)
  async createMayor(@graphql.Args() args: CreateMayorArgs): Promise<Mayor> {
    return await this.service.createMayor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Mayor)
  async updateMayor(
    @graphql.Args() args: UpdateMayorArgs
  ): Promise<Mayor | null> {
    try {
      return await this.service.updateMayor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Mayor)
  async deleteMayor(
    @graphql.Args() args: DeleteMayorArgs
  ): Promise<Mayor | null> {
    try {
      return await this.service.deleteMayor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Admin], { name: "admin" })
  async findAdmin(
    @graphql.Parent() parent: Mayor,
    @graphql.Args() args: AdminFindManyArgs
  ): Promise<Admin[]> {
    const results = await this.service.findAdmin(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Report], { name: "reports" })
  async findReports(
    @graphql.Parent() parent: Mayor,
    @graphql.Args() args: ReportFindManyArgs
  ): Promise<Report[]> {
    const results = await this.service.findReports(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
