/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Supervisor } from "./Supervisor";
import { SupervisorCountArgs } from "./SupervisorCountArgs";
import { SupervisorFindManyArgs } from "./SupervisorFindManyArgs";
import { SupervisorFindUniqueArgs } from "./SupervisorFindUniqueArgs";
import { CreateSupervisorArgs } from "./CreateSupervisorArgs";
import { UpdateSupervisorArgs } from "./UpdateSupervisorArgs";
import { DeleteSupervisorArgs } from "./DeleteSupervisorArgs";
import { RepairFindManyArgs } from "../../repair/base/RepairFindManyArgs";
import { Repair } from "../../repair/base/Repair";
import { Area } from "../../area/base/Area";
import { SupervisorService } from "../supervisor.service";
@graphql.Resolver(() => Supervisor)
export class SupervisorResolverBase {
  constructor(protected readonly service: SupervisorService) {}

  async _supervisorsMeta(
    @graphql.Args() args: SupervisorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Supervisor])
  async supervisors(
    @graphql.Args() args: SupervisorFindManyArgs
  ): Promise<Supervisor[]> {
    return this.service.supervisors(args);
  }

  @graphql.Query(() => Supervisor, { nullable: true })
  async supervisor(
    @graphql.Args() args: SupervisorFindUniqueArgs
  ): Promise<Supervisor | null> {
    const result = await this.service.supervisor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Supervisor)
  async createSupervisor(
    @graphql.Args() args: CreateSupervisorArgs
  ): Promise<Supervisor> {
    return await this.service.createSupervisor({
      ...args,
      data: {
        ...args.data,

        area: args.data.area
          ? {
              connect: args.data.area,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Supervisor)
  async updateSupervisor(
    @graphql.Args() args: UpdateSupervisorArgs
  ): Promise<Supervisor | null> {
    try {
      return await this.service.updateSupervisor({
        ...args,
        data: {
          ...args.data,

          area: args.data.area
            ? {
                connect: args.data.area,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Supervisor)
  async deleteSupervisor(
    @graphql.Args() args: DeleteSupervisorArgs
  ): Promise<Supervisor | null> {
    try {
      return await this.service.deleteSupervisor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Repair], { name: "repairs" })
  async findRepairs(
    @graphql.Parent() parent: Supervisor,
    @graphql.Args() args: RepairFindManyArgs
  ): Promise<Repair[]> {
    const results = await this.service.findRepairs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Area, {
    nullable: true,
    name: "area",
  })
  async getArea(@graphql.Parent() parent: Supervisor): Promise<Area | null> {
    const result = await this.service.getArea(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
