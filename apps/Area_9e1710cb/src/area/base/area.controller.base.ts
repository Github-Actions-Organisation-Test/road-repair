/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AreaService } from "../area.service";
import { AreaCreateInput } from "./AreaCreateInput";
import { Area } from "./Area";
import { AreaFindManyArgs } from "./AreaFindManyArgs";
import { AreaWhereUniqueInput } from "./AreaWhereUniqueInput";
import { AreaUpdateInput } from "./AreaUpdateInput";
import { SupervisorFindManyArgs } from "../../supervisor/base/SupervisorFindManyArgs";
import { Supervisor } from "../../supervisor/base/Supervisor";
import { SupervisorWhereUniqueInput } from "../../supervisor/base/SupervisorWhereUniqueInput";
import { RepairFindManyArgs } from "../../repair/base/RepairFindManyArgs";
import { Repair } from "../../repair/base/Repair";
import { RepairWhereUniqueInput } from "../../repair/base/RepairWhereUniqueInput";

export class AreaControllerBase {
  constructor(protected readonly service: AreaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Area })
  async createArea(@common.Body() data: AreaCreateInput): Promise<Area> {
    return await this.service.createArea({
      data: data,
      select: {
        id: true,
        name: true,
        address: true,
        region: true,
        country: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        residents: true,
        complaint: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Area] })
  @ApiNestedQuery(AreaFindManyArgs)
  async areas(@common.Req() request: Request): Promise<Area[]> {
    const args = plainToClass(AreaFindManyArgs, request.query);
    return this.service.areas({
      ...args,
      select: {
        id: true,
        name: true,
        address: true,
        region: true,
        country: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        residents: true,
        complaint: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Area })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async area(
    @common.Param() params: AreaWhereUniqueInput
  ): Promise<Area | null> {
    const result = await this.service.area({
      where: params,
      select: {
        id: true,
        name: true,
        address: true,
        region: true,
        country: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        residents: true,
        complaint: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Area })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateArea(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() data: AreaUpdateInput
  ): Promise<Area | null> {
    try {
      return await this.service.updateArea({
        where: params,
        data: data,
        select: {
          id: true,
          name: true,
          address: true,
          region: true,
          country: true,
          createdAt: true,
          updatedAt: true,
          deletedAt: true,
          residents: true,
          complaint: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Area })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteArea(
    @common.Param() params: AreaWhereUniqueInput
  ): Promise<Area | null> {
    try {
      return await this.service.deleteArea({
        where: params,
        select: {
          id: true,
          name: true,
          address: true,
          region: true,
          country: true,
          createdAt: true,
          updatedAt: true,
          deletedAt: true,
          residents: true,
          complaint: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/supervisors")
  @ApiNestedQuery(SupervisorFindManyArgs)
  async findSupervisors(
    @common.Req() request: Request,
    @common.Param() params: AreaWhereUniqueInput
  ): Promise<Supervisor[]> {
    const query = plainToClass(SupervisorFindManyArgs, request.query);
    const results = await this.service.findSupervisors(params.id, {
      ...query,
      select: {
        id: true,
        repairScheduleId: true,
        userId: true,
        adminId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        resources: true,

        area: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/supervisors")
  async connectSupervisors(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: SupervisorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supervisors: {
        connect: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/supervisors")
  async updateSupervisors(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: SupervisorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supervisors: {
        set: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/supervisors")
  async disconnectSupervisors(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: SupervisorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supervisors: {
        disconnect: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/repair")
  @ApiNestedQuery(RepairFindManyArgs)
  async findRepair(
    @common.Req() request: Request,
    @common.Param() params: AreaWhereUniqueInput
  ): Promise<Repair[]> {
    const query = plainToClass(RepairFindManyArgs, request.query);
    const results = await this.service.findRepair(params.id, {
      ...query,
      select: {
        id: true,
        status: true,
        priority: true,
        assignedToId: true,
        repairScheduleId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        complaints: true,
        resources: true,

        area: {
          select: {
            id: true,
          },
        },

        supervisors: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/repair")
  async connectRepair(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: RepairWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      repair: {
        connect: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/repair")
  async updateRepair(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: RepairWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      repair: {
        set: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/repair")
  async disconnectRepair(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: RepairWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      repair: {
        disconnect: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }
}
