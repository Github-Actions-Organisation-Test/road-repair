/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SupervisorService } from "../supervisor.service";
import { SupervisorCreateInput } from "./SupervisorCreateInput";
import { Supervisor } from "./Supervisor";
import { SupervisorFindManyArgs } from "./SupervisorFindManyArgs";
import { SupervisorWhereUniqueInput } from "./SupervisorWhereUniqueInput";
import { SupervisorUpdateInput } from "./SupervisorUpdateInput";
import { RepairFindManyArgs } from "../../repair/base/RepairFindManyArgs";
import { Repair } from "../../repair/base/Repair";
import { RepairWhereUniqueInput } from "../../repair/base/RepairWhereUniqueInput";

export class SupervisorControllerBase {
  constructor(protected readonly service: SupervisorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Supervisor })
  async createSupervisor(
    @common.Body() data: SupervisorCreateInput
  ): Promise<Supervisor> {
    return await this.service.createSupervisor({
      data: {
        ...data,

        area: data.area
          ? {
              connect: data.area,
            }
          : undefined,
      },
      select: {
        id: true,
        repairScheduleId: true,
        userId: true,
        adminId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        resources: true,

        area: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Supervisor] })
  @ApiNestedQuery(SupervisorFindManyArgs)
  async supervisors(@common.Req() request: Request): Promise<Supervisor[]> {
    const args = plainToClass(SupervisorFindManyArgs, request.query);
    return this.service.supervisors({
      ...args,
      select: {
        id: true,
        repairScheduleId: true,
        userId: true,
        adminId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        resources: true,

        area: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Supervisor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async supervisor(
    @common.Param() params: SupervisorWhereUniqueInput
  ): Promise<Supervisor | null> {
    const result = await this.service.supervisor({
      where: params,
      select: {
        id: true,
        repairScheduleId: true,
        userId: true,
        adminId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        resources: true,

        area: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Supervisor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSupervisor(
    @common.Param() params: SupervisorWhereUniqueInput,
    @common.Body() data: SupervisorUpdateInput
  ): Promise<Supervisor | null> {
    try {
      return await this.service.updateSupervisor({
        where: params,
        data: {
          ...data,

          area: data.area
            ? {
                connect: data.area,
              }
            : undefined,
        },
        select: {
          id: true,
          repairScheduleId: true,
          userId: true,
          adminId: true,
          createdAt: true,
          updatedAt: true,
          deletedAt: true,
          resources: true,

          area: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Supervisor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSupervisor(
    @common.Param() params: SupervisorWhereUniqueInput
  ): Promise<Supervisor | null> {
    try {
      return await this.service.deleteSupervisor({
        where: params,
        select: {
          id: true,
          repairScheduleId: true,
          userId: true,
          adminId: true,
          createdAt: true,
          updatedAt: true,
          deletedAt: true,
          resources: true,

          area: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/repairs")
  @ApiNestedQuery(RepairFindManyArgs)
  async findRepairs(
    @common.Req() request: Request,
    @common.Param() params: SupervisorWhereUniqueInput
  ): Promise<Repair[]> {
    const query = plainToClass(RepairFindManyArgs, request.query);
    const results = await this.service.findRepairs(params.id, {
      ...query,
      select: {
        id: true,
        status: true,
        priority: true,
        assignedToId: true,
        repairScheduleId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        complaints: true,
        resources: true,

        area: {
          select: {
            id: true,
          },
        },

        supervisors: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/repairs")
  async connectRepairs(
    @common.Param() params: SupervisorWhereUniqueInput,
    @common.Body() body: RepairWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      repairs: {
        connect: body,
      },
    };
    await this.service.updateSupervisor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/repairs")
  async updateRepairs(
    @common.Param() params: SupervisorWhereUniqueInput,
    @common.Body() body: RepairWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      repairs: {
        set: body,
      },
    };
    await this.service.updateSupervisor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/repairs")
  async disconnectRepairs(
    @common.Param() params: SupervisorWhereUniqueInput,
    @common.Body() body: RepairWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      repairs: {
        disconnect: body,
      },
    };
    await this.service.updateSupervisor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
