/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UpdateService } from "../update.service";
import { UpdateCreateInput } from "./UpdateCreateInput";
import { Update } from "./Update";
import { UpdateFindManyArgs } from "./UpdateFindManyArgs";
import { UpdateWhereUniqueInput } from "./UpdateWhereUniqueInput";
import { UpdateUpdateInput } from "./UpdateUpdateInput";

export class UpdateControllerBase {
  constructor(protected readonly service: UpdateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Update })
  async createUpdate(@common.Body() data: UpdateCreateInput): Promise<Update> {
    return await this.service.createUpdate({
      data: data,
      select: {
        id: true,
        time: true,
        reportId: true,
        residentsId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        complaints: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Update] })
  @ApiNestedQuery(UpdateFindManyArgs)
  async updates(@common.Req() request: Request): Promise<Update[]> {
    const args = plainToClass(UpdateFindManyArgs, request.query);
    return this.service.updates({
      ...args,
      select: {
        id: true,
        time: true,
        reportId: true,
        residentsId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        complaints: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Update })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: UpdateWhereUniqueInput
  ): Promise<Update | null> {
    const result = await this.service.update({
      where: params,
      select: {
        id: true,
        time: true,
        reportId: true,
        residentsId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        complaints: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Update })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUpdate(
    @common.Param() params: UpdateWhereUniqueInput,
    @common.Body() data: UpdateUpdateInput
  ): Promise<Update | null> {
    try {
      return await this.service.updateUpdate({
        where: params,
        data: data,
        select: {
          id: true,
          time: true,
          reportId: true,
          residentsId: true,
          createdAt: true,
          updatedAt: true,
          deletedAt: true,
          complaints: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Update })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUpdate(
    @common.Param() params: UpdateWhereUniqueInput
  ): Promise<Update | null> {
    try {
      return await this.service.deleteUpdate({
        where: params,
        select: {
          id: true,
          time: true,
          reportId: true,
          residentsId: true,
          createdAt: true,
          updatedAt: true,
          deletedAt: true,
          complaints: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
