/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Update } from "./Update";
import { UpdateCountArgs } from "./UpdateCountArgs";
import { UpdateFindManyArgs } from "./UpdateFindManyArgs";
import { UpdateFindUniqueArgs } from "./UpdateFindUniqueArgs";
import { CreateUpdateArgs } from "./CreateUpdateArgs";
import { UpdateUpdateArgs } from "./UpdateUpdateArgs";
import { DeleteUpdateArgs } from "./DeleteUpdateArgs";
import { ComplaintFindManyArgs } from "../../complaint/base/ComplaintFindManyArgs";
import { Complaint } from "../../complaint/base/Complaint";
import { Resident } from "../../resident/base/Resident";
import { UpdateService } from "../update.service";
@graphql.Resolver(() => Update)
export class UpdateResolverBase {
  constructor(protected readonly service: UpdateService) {}

  async _updatesMeta(
    @graphql.Args() args: UpdateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Update])
  async updates(@graphql.Args() args: UpdateFindManyArgs): Promise<Update[]> {
    return this.service.updates(args);
  }

  @graphql.Query(() => Update, { nullable: true })
  async update(
    @graphql.Args() args: UpdateFindUniqueArgs
  ): Promise<Update | null> {
    const result = await this.service.update(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Update)
  async createUpdate(@graphql.Args() args: CreateUpdateArgs): Promise<Update> {
    return await this.service.createUpdate({
      ...args,
      data: {
        ...args.data,

        residents: args.data.residents
          ? {
              connect: args.data.residents,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Update)
  async updateUpdate(
    @graphql.Args() args: UpdateUpdateArgs
  ): Promise<Update | null> {
    try {
      return await this.service.updateUpdate({
        ...args,
        data: {
          ...args.data,

          residents: args.data.residents
            ? {
                connect: args.data.residents,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Update)
  async deleteUpdate(
    @graphql.Args() args: DeleteUpdateArgs
  ): Promise<Update | null> {
    try {
      return await this.service.deleteUpdate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Complaint], { name: "complaints" })
  async findComplaints(
    @graphql.Parent() parent: Update,
    @graphql.Args() args: ComplaintFindManyArgs
  ): Promise<Complaint[]> {
    const results = await this.service.findComplaints(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Resident, {
    nullable: true,
    name: "residents",
  })
  async getResidents(
    @graphql.Parent() parent: Update
  ): Promise<Resident | null> {
    const result = await this.service.getResidents(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
