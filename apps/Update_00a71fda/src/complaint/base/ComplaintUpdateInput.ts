/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsBoolean,
  IsInt,
  IsEnum,
  IsDate,
  ValidateNested,
} from "class-validator";
import { EnumComplaintSeverity } from "./EnumComplaintSeverity";
import { EnumComplaintStatus } from "./EnumComplaintStatus";
import { Type } from "class-transformer";
import { UpdateWhereUniqueInput } from "../../update/base/UpdateWhereUniqueInput";
import { ResidentWhereUniqueInput } from "../../resident/base/ResidentWhereUniqueInput";

@InputType()
class ComplaintUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  road?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  subscription?: boolean;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  areaId?: number;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  userId?: number;

  @ApiProperty({
    required: false,
    enum: EnumComplaintSeverity,
  })
  @IsEnum(EnumComplaintSeverity)
  @IsOptional()
  @Field(() => EnumComplaintSeverity, {
    nullable: true,
  })
  severity?: "Low" | "Medium" | "High";

  @ApiProperty({
    required: false,
    enum: EnumComplaintStatus,
  })
  @IsEnum(EnumComplaintStatus)
  @IsOptional()
  @Field(() => EnumComplaintStatus, {
    nullable: true,
  })
  status?: "Pending" | "InProgress" | "Completed";

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  repairId?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  reportId?: number | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  deletedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: () => UpdateWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UpdateWhereUniqueInput)
  @IsOptional()
  @Field(() => UpdateWhereUniqueInput, {
    nullable: true,
  })
  update?: UpdateWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ResidentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ResidentWhereUniqueInput)
  @IsOptional()
  @Field(() => ResidentWhereUniqueInput, {
    nullable: true,
  })
  residents?: ResidentWhereUniqueInput | null;
}

export { ComplaintUpdateInput as ComplaintUpdateInput };
