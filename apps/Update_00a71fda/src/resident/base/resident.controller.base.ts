/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ResidentService } from "../resident.service";
import { ResidentCreateInput } from "./ResidentCreateInput";
import { Resident } from "./Resident";
import { ResidentFindManyArgs } from "./ResidentFindManyArgs";
import { ResidentWhereUniqueInput } from "./ResidentWhereUniqueInput";
import { ResidentUpdateInput } from "./ResidentUpdateInput";
import { ComplaintFindManyArgs } from "../../complaint/base/ComplaintFindManyArgs";
import { Complaint } from "../../complaint/base/Complaint";
import { ComplaintWhereUniqueInput } from "../../complaint/base/ComplaintWhereUniqueInput";
import { UpdateFindManyArgs } from "../../update/base/UpdateFindManyArgs";
import { Update } from "../../update/base/Update";
import { UpdateWhereUniqueInput } from "../../update/base/UpdateWhereUniqueInput";

export class ResidentControllerBase {
  constructor(protected readonly service: ResidentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Resident })
  async createResident(
    @common.Body() data: ResidentCreateInput
  ): Promise<Resident> {
    return await this.service.createResident({
      data: data,
      select: {
        id: true,
        areaId: true,
        userId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Resident] })
  @ApiNestedQuery(ResidentFindManyArgs)
  async residents(@common.Req() request: Request): Promise<Resident[]> {
    const args = plainToClass(ResidentFindManyArgs, request.query);
    return this.service.residents({
      ...args,
      select: {
        id: true,
        areaId: true,
        userId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Resident })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async resident(
    @common.Param() params: ResidentWhereUniqueInput
  ): Promise<Resident | null> {
    const result = await this.service.resident({
      where: params,
      select: {
        id: true,
        areaId: true,
        userId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Resident })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateResident(
    @common.Param() params: ResidentWhereUniqueInput,
    @common.Body() data: ResidentUpdateInput
  ): Promise<Resident | null> {
    try {
      return await this.service.updateResident({
        where: params,
        data: data,
        select: {
          id: true,
          areaId: true,
          userId: true,
          createdAt: true,
          updatedAt: true,
          deletedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Resident })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteResident(
    @common.Param() params: ResidentWhereUniqueInput
  ): Promise<Resident | null> {
    try {
      return await this.service.deleteResident({
        where: params,
        select: {
          id: true,
          areaId: true,
          userId: true,
          createdAt: true,
          updatedAt: true,
          deletedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/complaints")
  @ApiNestedQuery(ComplaintFindManyArgs)
  async findComplaints(
    @common.Req() request: Request,
    @common.Param() params: ResidentWhereUniqueInput
  ): Promise<Complaint[]> {
    const query = plainToClass(ComplaintFindManyArgs, request.query);
    const results = await this.service.findComplaints(params.id, {
      ...query,
      select: {
        id: true,
        road: true,
        description: true,
        subscription: true,
        areaId: true,
        userId: true,
        severity: true,
        status: true,
        repairId: true,
        reportId: true,
        createdAt: true,
        updatedAt: true,
        deletedAt: true,

        update: {
          select: {
            id: true,
          },
        },

        residents: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/complaints")
  async connectComplaints(
    @common.Param() params: ResidentWhereUniqueInput,
    @common.Body() body: ComplaintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaints: {
        connect: body,
      },
    };
    await this.service.updateResident({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/complaints")
  async updateComplaints(
    @common.Param() params: ResidentWhereUniqueInput,
    @common.Body() body: ComplaintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaints: {
        set: body,
      },
    };
    await this.service.updateResident({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/complaints")
  async disconnectComplaints(
    @common.Param() params: ResidentWhereUniqueInput,
    @common.Body() body: ComplaintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaints: {
        disconnect: body,
      },
    };
    await this.service.updateResident({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/updates")
  @ApiNestedQuery(UpdateFindManyArgs)
  async findUpdates(
    @common.Req() request: Request,
    @common.Param() params: ResidentWhereUniqueInput
  ): Promise<Update[]> {
    const query = plainToClass(UpdateFindManyArgs, request.query);
    const results = await this.service.findUpdates(params.id, {
      ...query,
      select: {
        id: true,
        time: true,
        reportId: true,

        residents: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        updatedAt: true,
        deletedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/updates")
  async connectUpdates(
    @common.Param() params: ResidentWhereUniqueInput,
    @common.Body() body: UpdateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      updates: {
        connect: body,
      },
    };
    await this.service.updateResident({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/updates")
  async updateUpdates(
    @common.Param() params: ResidentWhereUniqueInput,
    @common.Body() body: UpdateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      updates: {
        set: body,
      },
    };
    await this.service.updateResident({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/updates")
  async disconnectUpdates(
    @common.Param() params: ResidentWhereUniqueInput,
    @common.Body() body: UpdateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      updates: {
        disconnect: body,
      },
    };
    await this.service.updateResident({
      where: params,
      data,
      select: { id: true },
    });
  }
}
