/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RepairService } from "../repair.service";
import { RepairCreateInput } from "./RepairCreateInput";
import { Repair } from "./Repair";
import { RepairFindManyArgs } from "./RepairFindManyArgs";
import { RepairWhereUniqueInput } from "./RepairWhereUniqueInput";
import { RepairUpdateInput } from "./RepairUpdateInput";

export class RepairControllerBase {
  constructor(protected readonly service: RepairService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Repair })
  async createRepair(@common.Body() data: RepairCreateInput): Promise<Repair> {
    return await this.service.createRepair({
      data: {
        ...data,

        repairSchedule: data.repairSchedule
          ? {
              connect: data.repairSchedule,
            }
          : undefined,
      },
      select: {
        id: true,
        status: true,
        priority: true,
        assignedToId: true,
        areaId: true,
        supervisorsId: true,

        repairSchedule: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        complaints: true,
        resources: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Repair] })
  @ApiNestedQuery(RepairFindManyArgs)
  async repairs(@common.Req() request: Request): Promise<Repair[]> {
    const args = plainToClass(RepairFindManyArgs, request.query);
    return this.service.repairs({
      ...args,
      select: {
        id: true,
        status: true,
        priority: true,
        assignedToId: true,
        areaId: true,
        supervisorsId: true,

        repairSchedule: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        complaints: true,
        resources: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Repair })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async repair(
    @common.Param() params: RepairWhereUniqueInput
  ): Promise<Repair | null> {
    const result = await this.service.repair({
      where: params,
      select: {
        id: true,
        status: true,
        priority: true,
        assignedToId: true,
        areaId: true,
        supervisorsId: true,

        repairSchedule: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        updatedAt: true,
        deletedAt: true,
        complaints: true,
        resources: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Repair })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRepair(
    @common.Param() params: RepairWhereUniqueInput,
    @common.Body() data: RepairUpdateInput
  ): Promise<Repair | null> {
    try {
      return await this.service.updateRepair({
        where: params,
        data: {
          ...data,

          repairSchedule: data.repairSchedule
            ? {
                connect: data.repairSchedule,
              }
            : undefined,
        },
        select: {
          id: true,
          status: true,
          priority: true,
          assignedToId: true,
          areaId: true,
          supervisorsId: true,

          repairSchedule: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          updatedAt: true,
          deletedAt: true,
          complaints: true,
          resources: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Repair })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRepair(
    @common.Param() params: RepairWhereUniqueInput
  ): Promise<Repair | null> {
    try {
      return await this.service.deleteRepair({
        where: params,
        select: {
          id: true,
          status: true,
          priority: true,
          assignedToId: true,
          areaId: true,
          supervisorsId: true,

          repairSchedule: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          updatedAt: true,
          deletedAt: true,
          complaints: true,
          resources: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
