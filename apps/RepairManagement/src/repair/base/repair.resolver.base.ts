/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Repair } from "./Repair";
import { RepairCountArgs } from "./RepairCountArgs";
import { RepairFindManyArgs } from "./RepairFindManyArgs";
import { RepairFindUniqueArgs } from "./RepairFindUniqueArgs";
import { CreateRepairArgs } from "./CreateRepairArgs";
import { UpdateRepairArgs } from "./UpdateRepairArgs";
import { DeleteRepairArgs } from "./DeleteRepairArgs";
import { RepairSchedule } from "../../repairSchedule/base/RepairSchedule";
import { RepairService } from "../repair.service";
@graphql.Resolver(() => Repair)
export class RepairResolverBase {
  constructor(protected readonly service: RepairService) {}

  async _repairsMeta(
    @graphql.Args() args: RepairCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Repair])
  async repairs(@graphql.Args() args: RepairFindManyArgs): Promise<Repair[]> {
    return this.service.repairs(args);
  }

  @graphql.Query(() => Repair, { nullable: true })
  async repair(
    @graphql.Args() args: RepairFindUniqueArgs
  ): Promise<Repair | null> {
    const result = await this.service.repair(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Repair)
  async createRepair(@graphql.Args() args: CreateRepairArgs): Promise<Repair> {
    return await this.service.createRepair({
      ...args,
      data: {
        ...args.data,

        repairSchedule: args.data.repairSchedule
          ? {
              connect: args.data.repairSchedule,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Repair)
  async updateRepair(
    @graphql.Args() args: UpdateRepairArgs
  ): Promise<Repair | null> {
    try {
      return await this.service.updateRepair({
        ...args,
        data: {
          ...args.data,

          repairSchedule: args.data.repairSchedule
            ? {
                connect: args.data.repairSchedule,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Repair)
  async deleteRepair(
    @graphql.Args() args: DeleteRepairArgs
  ): Promise<Repair | null> {
    try {
      return await this.service.deleteRepair(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => RepairSchedule, {
    nullable: true,
    name: "repairSchedule",
  })
  async getRepairSchedule(
    @graphql.Parent() parent: Repair
  ): Promise<RepairSchedule | null> {
    const result = await this.service.getRepairSchedule(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
