/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Area } from "./Area";
import { AreaCountArgs } from "./AreaCountArgs";
import { AreaFindManyArgs } from "./AreaFindManyArgs";
import { AreaFindUniqueArgs } from "./AreaFindUniqueArgs";
import { CreateAreaArgs } from "./CreateAreaArgs";
import { UpdateAreaArgs } from "./UpdateAreaArgs";
import { DeleteAreaArgs } from "./DeleteAreaArgs";
import { ResidentFindManyArgs } from "../../resident/base/ResidentFindManyArgs";
import { Resident } from "../../resident/base/Resident";
import { ComplaintFindManyArgs } from "../../complaint/base/ComplaintFindManyArgs";
import { Complaint } from "../../complaint/base/Complaint";
import { AreaService } from "../area.service";
@graphql.Resolver(() => Area)
export class AreaResolverBase {
  constructor(protected readonly service: AreaService) {}

  async _areasMeta(
    @graphql.Args() args: AreaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Area])
  async areas(@graphql.Args() args: AreaFindManyArgs): Promise<Area[]> {
    return this.service.areas(args);
  }

  @graphql.Query(() => Area, { nullable: true })
  async area(@graphql.Args() args: AreaFindUniqueArgs): Promise<Area | null> {
    const result = await this.service.area(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Area)
  async createArea(@graphql.Args() args: CreateAreaArgs): Promise<Area> {
    return await this.service.createArea({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Area)
  async updateArea(@graphql.Args() args: UpdateAreaArgs): Promise<Area | null> {
    try {
      return await this.service.updateArea({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Area)
  async deleteArea(@graphql.Args() args: DeleteAreaArgs): Promise<Area | null> {
    try {
      return await this.service.deleteArea(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Resident], { name: "residents" })
  async findResidents(
    @graphql.Parent() parent: Area,
    @graphql.Args() args: ResidentFindManyArgs
  ): Promise<Resident[]> {
    const results = await this.service.findResidents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Complaint], { name: "complaint" })
  async findComplaint(
    @graphql.Parent() parent: Area,
    @graphql.Args() args: ComplaintFindManyArgs
  ): Promise<Complaint[]> {
    const results = await this.service.findComplaint(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
