/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RepairSchedule } from "./RepairSchedule";
import { RepairScheduleCountArgs } from "./RepairScheduleCountArgs";
import { RepairScheduleFindManyArgs } from "./RepairScheduleFindManyArgs";
import { RepairScheduleFindUniqueArgs } from "./RepairScheduleFindUniqueArgs";
import { CreateRepairScheduleArgs } from "./CreateRepairScheduleArgs";
import { UpdateRepairScheduleArgs } from "./UpdateRepairScheduleArgs";
import { DeleteRepairScheduleArgs } from "./DeleteRepairScheduleArgs";
import { RepairScheduleService } from "../repairSchedule.service";
@graphql.Resolver(() => RepairSchedule)
export class RepairScheduleResolverBase {
  constructor(protected readonly service: RepairScheduleService) {}

  async _repairSchedulesMeta(
    @graphql.Args() args: RepairScheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RepairSchedule])
  async repairSchedules(
    @graphql.Args() args: RepairScheduleFindManyArgs
  ): Promise<RepairSchedule[]> {
    return this.service.repairSchedules(args);
  }

  @graphql.Query(() => RepairSchedule, { nullable: true })
  async repairSchedule(
    @graphql.Args() args: RepairScheduleFindUniqueArgs
  ): Promise<RepairSchedule | null> {
    const result = await this.service.repairSchedule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RepairSchedule)
  async createRepairSchedule(
    @graphql.Args() args: CreateRepairScheduleArgs
  ): Promise<RepairSchedule> {
    return await this.service.createRepairSchedule({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RepairSchedule)
  async updateRepairSchedule(
    @graphql.Args() args: UpdateRepairScheduleArgs
  ): Promise<RepairSchedule | null> {
    try {
      return await this.service.updateRepairSchedule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RepairSchedule)
  async deleteRepairSchedule(
    @graphql.Args() args: DeleteRepairScheduleArgs
  ): Promise<RepairSchedule | null> {
    try {
      return await this.service.deleteRepairSchedule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
